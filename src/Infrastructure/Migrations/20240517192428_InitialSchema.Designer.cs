// <auto-generated />
using System;
using Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240517192428_InitialSchema")]
    partial class InitialSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.ExecutionAggregate.Execution", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateToComplete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_to_complete");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<int>("NumberOfExercises")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_exercises");

                    b.Property<Guid>("PupilId")
                        .HasColumnType("uuid")
                        .HasColumnName("pupil_id");

                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uuid")
                        .HasColumnName("trainer_id");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uuid")
                        .HasColumnName("training_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_execution");

                    b.ToTable("execution", (string)null);
                });

            modelBuilder.Entity("Domain.ExerciseAggregate.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid")
                        .HasColumnName("part_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_exercises");

                    b.ToTable("exercises", (string)null);
                });

            modelBuilder.Entity("Domain.PartAggregate.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_parts");

                    b.ToTable("parts", (string)null);
                });

            modelBuilder.Entity("Domain.PupilAggregate.Pupil", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uuid")
                        .HasColumnName("trainer_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_pupils");

                    b.ToTable("pupils", (string)null);
                });

            modelBuilder.Entity("Domain.TrainerAggregate.Trainer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_trainers");

                    b.ToTable("trainers", (string)null);
                });

            modelBuilder.Entity("Domain.TrainingAggregate.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfExercises")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_exercises");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_trainings");

                    b.ToTable("trainings", (string)null);
                });

            modelBuilder.Entity("Domain.ExecutionAggregate.Execution", b =>
                {
                    b.OwnsMany("Domain.ExecutionAggregate.Entities.ExecutionSet", "Sets", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("execution_set_id");

                            b1.Property<Guid>("execution_id")
                                .HasColumnType("uuid")
                                .HasColumnName("execution_id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.Property<Guid>("ExerciseId")
                                .HasColumnType("uuid")
                                .HasColumnName("exercise_id");

                            b1.Property<int>("Repetitions")
                                .HasColumnType("integer")
                                .HasColumnName("repetitions");

                            b1.Property<int>("Time")
                                .HasColumnType("integer")
                                .HasColumnName("time");

                            b1.HasKey("Id", "execution_id")
                                .HasName("pk_execution_sets");

                            b1.HasIndex("execution_id")
                                .HasDatabaseName("ix_execution_sets_execution_id");

                            b1.ToTable("execution_sets", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("execution_id")
                                .HasConstraintName("fk_execution_sets_execution_execution_id");
                        });

                    b.Navigation("Sets");
                });

            modelBuilder.Entity("Domain.ExerciseAggregate.Exercise", b =>
                {
                    b.OwnsOne("Domain.Common.ValueObjects.Image", "Photo", b1 =>
                        {
                            b1.Property<Guid>("ExerciseId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("ImageId")
                                .HasColumnType("uuid")
                                .HasColumnName("photo_image_id");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("photo_url");

                            b1.HasKey("ExerciseId");

                            b1.ToTable("exercises");

                            b1.WithOwner()
                                .HasForeignKey("ExerciseId")
                                .HasConstraintName("fk_exercises_exercises_id");
                        });

                    b.Navigation("Photo")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.PartAggregate.Part", b =>
                {
                    b.OwnsMany("Domain.ExerciseAggregate.ExerciseId", "ExerciseIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("exercise_id");

                            b1.Property<Guid>("part_id")
                                .HasColumnType("uuid")
                                .HasColumnName("part_id");

                            b1.HasKey("Id")
                                .HasName("pk_part_exercise_ids");

                            b1.HasIndex("part_id")
                                .HasDatabaseName("ix_part_exercise_ids_part_id");

                            b1.ToTable("part_exercise_ids", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("part_id")
                                .HasConstraintName("fk_part_exercise_ids_parts_part_id");
                        });

                    b.Navigation("ExerciseIds");
                });

            modelBuilder.Entity("Domain.TrainerAggregate.Trainer", b =>
                {
                    b.OwnsMany("Domain.PupilAggregate.PupilId", "PupilIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("pupil_id");

                            b1.Property<Guid>("trainer_id")
                                .HasColumnType("uuid")
                                .HasColumnName("trainer_id");

                            b1.HasKey("Id")
                                .HasName("pk_trainer_pupil_ids");

                            b1.HasIndex("trainer_id")
                                .HasDatabaseName("ix_trainer_pupil_ids_trainer_id");

                            b1.ToTable("trainer_pupil_ids", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("trainer_id")
                                .HasConstraintName("fk_trainer_pupil_ids_trainers_trainer_id");
                        });

                    b.Navigation("PupilIds");
                });

            modelBuilder.Entity("Domain.TrainingAggregate.Training", b =>
                {
                    b.OwnsMany("Domain.TrainingAggregate.Entities.TrainingSet", "Sets", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("training_set_id");

                            b1.Property<Guid>("training_id")
                                .HasColumnType("uuid")
                                .HasColumnName("training_id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.Property<Guid>("ExerciseId")
                                .HasColumnType("uuid")
                                .HasColumnName("exercise_id");

                            b1.Property<int>("Repetitions")
                                .HasColumnType("integer")
                                .HasColumnName("repetitions");

                            b1.Property<int>("Time")
                                .HasColumnType("integer")
                                .HasColumnName("time");

                            b1.HasKey("Id", "training_id")
                                .HasName("pk_training_sets");

                            b1.HasIndex("training_id")
                                .HasDatabaseName("ix_training_sets_training_id");

                            b1.ToTable("training_sets", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("training_id")
                                .HasConstraintName("fk_training_sets_trainings_training_id");
                        });

                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
